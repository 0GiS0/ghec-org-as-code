# =============================================================================
# CONFIGURACIÓN DE VARIABLES DE ENTORNO PARA GHEC ORG AS CODE
# =============================================================================
# Copiar este archivo a .env y completar con los valores reales
# El archivo .env no debe ser commiteado al repositorio

# GitHub Organization
GITHUB_ORGANIZATION=your-org-name

# GitHub App Configuration
GITHUB_APP_ID=123456
GITHUB_APP_INSTALLATION_ID=12345678
GITHUB_APP_PEM_FILE=your-github-app.pem

# Terraform Configuration (opcional, usar si no se pasan via terraform.tfvars)
TF_VAR_github_organization=${GITHUB_ORGANIZATION}
TF_VAR_github_app_id=${GITHUB_APP_ID}
TF_VAR_github_app_installation_id=${GITHUB_APP_INSTALLATION_ID}
TF_VAR_github_app_pem_file=${GITHUB_APP_PEM_FILE}

# Custom Properties Configuration
CUSTOM_PROPERTIES_NON_FATAL_404=false

# Logging Configuration
LOG_LEVEL=INFO
LOG_DIR=/tmp

# Codespaces Configuration
CODESPACES_ACCESS_SETTING=selected
SELECTED_USERS=["user1","user2","user3"]

# Azure Storage Backend Configuration - Service Principal
ARM_CLIENT_ID=your-azure-service-principal-client-id
ARM_CLIENT_SECRET=your-azure-service-principal-client-secret
ARM_TENANT_ID=your-azure-tenant-id

# Azure Storage Backend Details
AZURE_RESOURCE_GROUP_NAME=rg-terraform-state
AZURE_STORAGE_ACCOUNT_NAME=tfstatexxxxxx
AZURE_CONTAINER_NAME=tfstate
AZURE_STATE_KEY=ghec-org.terraform.tfstate

# =============================================================================
# INSTRUCCIONES DE CONFIGURACIÓN
# =============================================================================

# 1. GitHub App Setup:
#    - Crear una GitHub App en tu organización
#    - Descargar la clave privada (.pem)
#    - Instalar la app en tu organización
#    - Obtener el APP_ID y INSTALLATION_ID

# 2. Permisos requeridos para la GitHub App:
#    - Organization: Read & Write (para custom properties)
#    - Repository: Read & Write (para crear/gestionar repositorios)
#    - Metadata: Read
#    - Members: Read
#    - Administration: Read & Write (para Codespaces)

# 3. Configuración del archivo PEM:
#    - Colocar el archivo .pem en el directorio raíz del proyecto
#    - Asegurar permisos restrictivos: chmod 600 your-github-app.pem
#    - El archivo .pem debe estar listado en .gitignore

# 4. Uso con scripts:
#    source .env  # Cargar variables antes de ejecutar scripts
#    ./scripts/repo-tools/check-all.sh

# 5. Uso con Terraform:
#    Las variables TF_VAR_* se cargan automáticamente por Terraform
#    O usar terraform.tfvars para configuración específica

# 6. Azure Storage Backend Configuration:
#    IMPORTANTE: Elegir UNO de los siguientes métodos de autenticación:
#    
#    MÉTODO 1 - Storage Account Key (solo si está habilitado):
#    - ARM_ACCESS_KEY: Clave de acceso del Storage Account
#    - ARM_TENANT_ID: Directory (tenant) ID de tu Azure AD
#    
#    MÉTODO 2 - Service Principal (recomendado para producción):
#    - ARM_CLIENT_ID: Application (client) ID del Service Principal
#    - ARM_TENANT_ID: Directory (tenant) ID de tu Azure AD
#    - ARM_CLIENT_SECRET: Secret del Service Principal (en .env, no .env.sample)
#    
#    MÉTODO 3 - Azure CLI (para desarrollo):
#    - Solo ARM_TENANT_ID y ejecutar: az login
#    
#    Nota: Algunos Storage Accounts tienen deshabilitada la autenticación por clave
#    En ese caso, usa Service Principal o Azure CLI
#    
#    Ejemplo de configuración backend en terraform.tf:
#      backend "azurerm" {
#        resource_group_name  = "rg-terraform-state"
#        storage_account_name = "tfstatexxxxxx"
#        container_name       = "tfstate"
#        key                  = "ghec-org.terraform.tfstate"
#      }


export TF_CLOUD_ORGANIZATION="mi-org"       # organización de Terraform Cloud
export TF_CLOUD_PROJECT="ghec-as-code"       # proyecto que contiene los workspaces
export TF_WORKSPACE="acme"  